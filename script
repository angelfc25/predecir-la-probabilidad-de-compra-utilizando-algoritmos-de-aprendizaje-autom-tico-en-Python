Paso 1: Carga de los datos

Comenzaremos importando las bibliotecas necesarias y creando un dataframe con 30 casos ficticios para representar a los clientes. Utilizaré la biblioteca Pandas para esto:

python
Copy code
import pandas as pd

# Crear un dataframe con 30 casos ficticios
data = {
    'ID': range(1, 31),
    'Edad': [25, 35, 45, 27, 40, 52, 33, 28, 38, 50, 32, 29, 43, 47, 55, 48, 37, 41, 26, 34, 36, 51, 30, 39, 42, 44, 31, 49, 53, 46],
    'Ingresos': [40000, 60000, 80000, 45000, 70000, 90000, 55000, 42000, 75000, 85000, 48000, 43000, 72000, 82000, 95000, 83000, 68000, 67000, 41000, 59000, 63000, 88000, 47000, 78000, 71000, 74000, 46000, 84000, 92000, 56000],
    'Compras': [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1]
}

df = pd.DataFrame(data)
En este código, creamos un diccionario con las columnas 'ID', 'Edad', 'Ingresos' y 'Compras' y sus respectivos valores para los 30 casos ficticios. Luego, convertimos el diccionario en un dataframe utilizando la función pd.DataFrame().

Paso 2: Análisis exploratorio de los datos

Antes de construir nuestro modelo de predicción, es útil realizar un análisis exploratorio de los datos para obtener insights relevantes. Utilizaremos visualizaciones para hacerlo más comprensible:

python
Copy code
import matplotlib.pyplot as plt
import seaborn as sns

# Visualización de la distribución de la edad
sns.histplot(df['Edad'], bins=10)
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.title('Distribución de la edad')
plt.show()

# Visualización de la distribución de los ingresos
sns.histplot(df['Ingresos'], bins=10)
plt.xlabel('Ingresos')
plt.ylabel('Frecuencia')
plt.title('Distribución de los ingresos')
plt.show()

# Visualización de la relación entre la edad y los ingresos
sns.scatterplot(x='Edad', y='Ingresos', data=df)
plt.xlabel('Edad')
plt.ylabel('Ingresos')
plt.title('Relación entre la edad y los ingresos')
plt.show()

# Visualización de la proporción de compras
sns.countplot(x='Compras', data=df)
plt.xlabel('Compras')
plt.ylabel('Cantidad')
plt.title('Proporción de compras')
plt.show()
En este código, utilizamos las bibliotecas Matplotlib y Seaborn para realizar visualizaciones. Primero, visualizamos la distribución de la edad y los ingresos utilizando histogramas. Luego, mostramos la relación entre la edad y los ingresos utilizando un gráfico de dispersión. Por último, mostramos la proporción de compras utilizando un gráfico de barras.

Estas visualizaciones nos ayudan a entender mejor los datos y pueden revelar patrones o relaciones relevantes.

Paso 3: Preparación de los datos

Antes de construir el modelo de predicción, debemos preparar los datos dividiéndolos en características (features) y variable objetivo (target). Además, dividiremos los datos en conjuntos de entrenamiento y prueba:

python
Copy code
from sklearn.model_selection import train_test_split

# Dividir los datos en características y variable objetivo
X = df[['Edad', 'Ingresos']]
y = df['Compras']

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
En este código, seleccionamos las columnas 'Edad' e 'Ingresos' como características (X) y la columna 'Compras' como variable objetivo (y). Luego, utilizamos la función train_test_split() de Scikit-learn para dividir los datos en conjuntos de entrenamiento (X_train, y_train) y prueba (X_test, y_test). El parámetro test_size especifica el tamaño del conjunto de prueba (en este caso, el 30%) y random_state se utiliza para garantizar la reproducibilidad de la división.

Paso 4: Entrenamiento y evaluación del modelo

A continuación, construiremos nuestro modelo de predicción utilizando un algoritmo de aprendizaje automático. Utilizaremos la regresión logística como ejemplo:

python
Copy code
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Crear una instancia del modelo de regresión logística
model = LogisticRegression()

# Entrenar el modelo utilizando los datos de entrenamiento
model.fit(X_train, y_train)

# Realizar predicciones en los datos de prueba
y_pred = model.predict(X_test)

# Evaluar la precisión del modelo
accuracy = accuracy_score(y_test, y_pred)
print('Precisión del modelo:', accuracy)
En este código, importamos la clase LogisticRegression y creamos una instancia del modelo de regresión logística. Luego, utilizamos el método fit() para entrenar el modelo utilizando los datos de entrenamiento.

Después de entrenar el modelo, realizamos predicciones en los datos de prueba utilizando el método predict(). Finalmente, evaluamos la precisión del modelo comparando las etiquetas predichas (y_pred) con las etiquetas reales (y_test) utilizando la función accuracy_score().

Paso 5: Obtención de probabilidades de compra

Además de las predicciones binarias (0 o 1), podemos obtener las probabilidades de compra utilizando el método predict_proba(). Esto nos proporciona una medida más continua de la probabilidad de compra para cada caso:

python
Copy code
probabilities = model.predict_proba(X_test)[:, 1]
En este código, utilizamos el método predict_proba() para obtener las probabilidades de compra en los datos de prueba. La notación [:, 1] nos permite seleccionar solo las probabilidades asociadas con la clase positiva (compra).

Paso 6: Visualización de las probabilidades de compra

Podemos visualizar las probabilidades de compra utilizando un histograma:

python
Copy code
plt.hist(probabilities, bins=10)
plt.xlabel('Probabilidad de compra')
plt.ylabel('Frecuencia')
plt.title('Distribución de las probabilidades de compra')
plt.show()
En este código, utilizamos plt.hist() para crear un histograma de las probabilidades de compra. Esto nos permite observar la distribución de las probabilidades y obtener información sobre el comportamiento del modelo.

Paso 7: Ejercicios adicionales para obtener insights relevantes

Aquí hay algunos ejercicios adicionales que puedes realizar para obtener insights más relevantes:

Calcula el porcentaje de compras en el conjunto de datos y visualiza esta proporción utilizando un gráfico de torta:
python
Copy code
purchase_percentage = df['Compras'].mean() * 100
non_purchase_percentage = 100 - purchase_percentage

labels = ['Compra', 'Sin compra']
sizes = [purchase_percentage, non_purchase_percentage]
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title('Proporción de compras')
plt.show()
Visualiza la relación entre la edad y las compras utilizando un gráfico de barras apiladas:
python
Copy code
age_purchases = df.groupby('Edad')['Compras'].sum()
age_non_purchases = df.groupby('Edad')['Compras'].count() - age_purchases

plt.bar(age_purchases.index, age_purchases, label='Compra')
plt.bar(age_non_purchases.index, age_non_purchases, bottom=age_purchases, label='Sin compra')
plt.xlabel('Edad')
plt.ylabel('Cantidad')
plt.title('Relación entre la edad y las compras')
plt.legend()
plt.show()
Calcula la correlación entre la edad, los ingresos y las compras utilizando una matriz de correlación y visualízala como un mapa de calor:
python
Copy code
correlation_matrix = df[['Edad', 'Ingresos', 'Compras']].corr()

sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Matriz de correlación')
plt.show()
Estos ejercicios adicionales te ayudarán a obtener insights más detallados sobre la relación entre las variables y las compras.

Recuerda que este es solo un ejemplo básico para predecir la probabilidad de compra utilizando algoritmos de aprendizaje automático en Python. En aplicaciones reales, puedes explorar diferentes algoritmos, ajustar hiperparámetros y realizar un análisis más profundo de los datos para obtener resultados más precisos e insights más valiosos.
